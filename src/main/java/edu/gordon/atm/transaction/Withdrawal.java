/* * ATM Example system - file Withdrawal.java     * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.transaction;import javax.naming.spi.DirStateFactory.Result;import org.junit.runner.JUnitCore;import edu.gordon.atm.ATM;import edu.gordon.atm.Session;import edu.gordon.atm.physical.CardReader;import edu.gordon.atm.physical.CashDispenser;import edu.gordon.atm.physical.CustomerConsole;import edu.gordon.atm.physical.EnvelopeAcceptor;import edu.gordon.atm.physical.NetworkToBank;import edu.gordon.atm.physical.ReceiptPrinter;import edu.gordon.banking.AccountInformation;import edu.gordon.banking.Balances;import edu.gordon.banking.Card;import edu.gordon.banking.Message;import edu.gordon.banking.Money;import edu.gordon.banking.Receipt;/** Representation for a cash withdrawal transaction */public class Withdrawal extends Transaction{    /** Constructor     *     *  @param edu.gordon.atm the ATM used to communicate with customer     *  @param session the session in which the transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     */    public Withdrawal(ReceiptPrinter receiptPrinter, NetworkToBank networkToBank, CashDispenser cashDispenser, EnvelopeAcceptor envelopeAcceptor, String bankName, int id, String place, CardReader cardReader, CustomerConsole customerConsole, Card card, int pin)    {        super(receiptPrinter, networkToBank, cashDispenser, envelopeAcceptor, bankName, id, place, cardReader, customerConsole, card, pin);    }        /** Get specifics for the transaction from the customer     *     *  @return message to bank for initiating this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     *  @jUnitTest Upon Junit test, prevent the system from sending request to graphical interface     */        protected Message getSpecificsFromCustomer() throws CustomerConsole.Cancelled    {    	//TODO    	//Set the to value by default.    	from = -1;    	    	//Upon JUnit test, prevent the system from sending request to graphical interface.    	if (!jUnitTest)    	{    		this.customerConsole.readMenuChoice("withdrawal_from", "Account to withdraw from", AccountInformation.ACCOUNT_NAMES);    	}    	else    	{    		from = 1;    	}    	    	//Prevent the system from running until we receive a response.    	while (from == -1)    	{    		System.out.println("withdrawal menu choice fromD");    	}    	    	//-100 means the user cancelled the dialog, throw an exception.    	if (from == -100)    	{    		throw new CustomerConsole.Cancelled();    	}    	        /*from = this.customerConsole.readMenuChoice(            "Account to withdraw from",            AccountInformation.ACCOUNT_NAMES);*/        String [] amountOptions = { "$20", "$40", "$60", "$100", "$200" };        Money [] amountValues = {                                   new Money(20), new Money(40), new Money(60),                                  new Money(100), new Money(200)                                };                                          String amountMessage = "";        boolean validAmount = false;                while (! validAmount)        {        	//TODO        	//Set the to value by default.        	menuChoice = -1;        	        	//Upon JUnit test, prevent the system from sending request to graphical interface.        	if (!jUnitTest)        	{        		this.customerConsole.readMenuChoice("menuChoice", amountMessage + "Amount of cash to withdraw", amountOptions);        	}        	else        	{        		menuChoice = 1;        	}        	        	//Prevent the system from running until we receive a response.        	while (menuChoice == -1)        	{        		System.out.println("menu choice block withdrawal");        	}        	        	//-100 means the user cancelled the dialog, throw an exception.        	if (menuChoice == -100)        	{        		throw new CustomerConsole.Cancelled();        	}        	        	//Possible exception if an exterior source send a value out of the table.        	try        	{        		amount = amountValues [ menuChoice ];        	}	        	catch(Exception ex){ex.printStackTrace();}                                        /* amount = amountValues [             this.customerConsole.readMenuChoice(                amountMessage + "Amount of cash to withdraw", amountOptions) ];*/                        validAmount = this.cashDispenser.checkCashOnHand(amount);            if (! validAmount)                amountMessage = "Insufficient cash available\n";        }        return new Message(Message.WITHDRAWAL,                            card, pin, serialNumber, from, -1, amount);    }        /** Complete an approved transaction     *     *  @return receipt to be printed for this transaction     */    protected Receipt completeTransaction()    {        this.cashDispenser.dispenseCash(amount);                return new Receipt(this.bankName, this.id, this.place, this.getSerialNumber(), this.card, this.balances) {            {                detailsPortion = new String[2];                detailsPortion[0] = "WITHDRAWAL FROM: " +                                     AccountInformation.ACCOUNT_ABBREVIATIONS[from];                detailsPortion[1] = "AMOUNT: " + amount.toString();            }        };    }	/** Account to withdraw from     */     public static int from;        /** Amount of money to withdraw     */    private Money amount;           }
/* * ATM Example system - file Transfer.java   * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.transaction;import edu.gordon.atm.ATM;import edu.gordon.banking.Receipt;import edu.gordon.atm.Session;import edu.gordon.atm.physical.CardReader;import edu.gordon.atm.physical.CashDispenser;import edu.gordon.atm.physical.CustomerConsole;import edu.gordon.atm.physical.EnvelopeAcceptor;import edu.gordon.atm.physical.NetworkToBank;import edu.gordon.atm.physical.ReceiptPrinter;import edu.gordon.banking.AccountInformation;import edu.gordon.banking.Card;import edu.gordon.banking.Message;import edu.gordon.banking.Money;import edu.gordon.pubsub.upper.Utilities;/** Representation for a transfer transaction */public class Transfer extends Transaction{    /** Constructor     *     *  @param edu.gordon.atm the ATM used to communicate with customer     *  @param session the session in which the transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     */    public Transfer(ReceiptPrinter receiptPrinter,NetworkToBank networkToBank, CashDispenser cashDispenser, EnvelopeAcceptor envelopeAcceptor, String bankName, int id, String place, CardReader cardReader, CustomerConsole customerConsole, Card card, int pin)    {        super(receiptPrinter, networkToBank, cashDispenser, envelopeAcceptor, bankName, id, place, cardReader, customerConsole, card, pin);    }        /** Get specifics for the transaction from the customer     *     *  @return message to bank for initiating this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     */    protected Message getSpecificsFromCustomer() throws CustomerConsole.Cancelled    {    	//TODO    	//Set the from value by default.    	from = -1;    	    	//Upon JUnit test, prevent the system from sending request to graphical interface.    	//if (!jUnitTest)    	//{    	this.customerConsole.readMenuChoice("transfer_from", "Account to transfer from", AccountInformation.ACCOUNT_NAMES);    	//}    	//else    	//{    	//	from = 1;    	//}    	    	//Prevent the system from running until we receive a response.    	/*while (from == -1)    	{    		System.out.println("transfer block");    	}*/    	    	//-100 means the user cancelled the dialog, throw an exception.    	if (from == -100)    	{    		throw new CustomerConsole.Cancelled();    	}    	    	//Set the to value by default.    	to = -1;    	    	//Upon JUnit test, prevent the system from sending request to graphical interface.    	//if (!jUnitTest)    	//{    	this.customerConsole.readMenuChoice("transfer_to", "Account to transfer to", AccountInformation.ACCOUNT_NAMES);    	    	if (Utilities.jUnitTest)    	{    		++to;    	}    	//}    	//else    	//{    	//	to = 2;    	//}    	    	//Prevent the system from running until we receive a response.    	/*while (to == -1)    	{    		System.out.println("transfer block");    	}*/    	    	//-100 means the user cancelled the dialog, throw an exception.    	if (to == -100)    	{    		throw new CustomerConsole.Cancelled();    	}    	    	//Set the amount value by default    	amount = null;    	    	//Upon JUnit test, prevent the system from sending request to graphical interface.    	//if (!jUnitTest)    	//{    	this.customerConsole.readAmount(this, "Amount to transfer");    	//}    	//else    	//{    	//	amount = new Money(40);    	//}    	    	//If we didn't receive any money, it means the user cancelled the dialog.    	/*while (amount == null)    	{    		throw new CustomerConsole.Cancelled();    	}*/    	    	if (amount == null)    	{    		throw new CustomerConsole.Cancelled();    	}    	    	    	    	    	     	/*if (from == -100 || to == -100)    	{    		throw new CustomerConsole.Cancelled();    	}*/    	        /*from = this.customerConsole.readMenuChoice(            "Account to transfer from",            AccountInformation.ACCOUNT_NAMES);        to = this.customerConsole.readMenuChoice(            "Account to transfer to",            AccountInformation.ACCOUNT_NAMES);        amount = this.customerConsole.readAmount("Amount to transfer");*/                return new Message(Message.TRANSFER, card, pin, serialNumber, from, to, amount);    }        /** Complete an approved transaction     *     *  @return receipt to be printed for this transaction     */    protected Receipt completeTransaction()    {        return new Receipt(this.bankName, this.id, this.place, this.getSerialNumber(), this.card, this.balances) {            {                detailsPortion = new String[2];                detailsPortion[0] = "TRANSFER FROM: " +                                     AccountInformation.ACCOUNT_ABBREVIATIONS[from] +                                    " TO: " +                                     AccountInformation.ACCOUNT_ABBREVIATIONS[to] ;                detailsPortion[1] = "AMOUNT: " + amount.toString();            }        };    }        /** Accounts to transfer from     */    public static int from;        /** Account to transfer to     */    public static int to;        /** Amount of money to transfer     */    public static Money amount;           }
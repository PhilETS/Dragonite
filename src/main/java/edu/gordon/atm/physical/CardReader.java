/* * ATM Example system - file CardReader.java * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.physical;import com.google.common.eventbus.EventBus;import edu.gordon.atm.Session;import edu.gordon.atm.broadcaster.BroadcastCard;import edu.gordon.banking.Card;import edu.gordon.pubsub.upper.EjectCardComponent;import edu.gordon.pubsub.upper.EjectCardEvent;import edu.gordon.pubsub.upper.ReadCardComponent;import edu.gordon.pubsub.upper.ReadCardEvent;import edu.gordon.pubsub.upper.RetainCardComponent;import edu.gordon.pubsub.upper.RetainCardEvent;/** Manager for the ATM's card reader.  In a real ATM, this would  *  manage a physical device; in this edu.gordon.simulation, it uses classes  *  in package edu.gordon.simulation to simulate the device.   */ public class CardReader{	private EventBus eventBus;	private static Session session;    /** Constructor     *     *  @param edu.gordon.atm the ATM that owns this card reader     */    public CardReader()    {    	eventBus = new EventBus();    	eventBus.register(new ReadCardComponent());    	eventBus.register(new EjectCardComponent());    	eventBus.register(new RetainCardComponent());    	    }        // In a real ATM, code would be needed to sense insertion of a card into the    // slot and notify the ATM - simulated in this case by a button in the GUI        /** Read a card that has been partially inserted into the reader     *     *  @return Card object representing information on the card if read     *          successfully, null if not read successfully     */    public void readCard(Session session)    {    	CardReader.session=session;    	eventBus.post(new ReadCardEvent(""));        //return convertCard(listener.ListenReadCard());    }        public static void receiveCard(BroadcastCard card)    {    	session.setCard(convertCard(card));    }        private static Card convertCard(BroadcastCard card)     {		return new Card(card.getNumber());	}	/** Eject the card that is currently inside the reader.       */    public void ejectCard()    {    	eventBus.post(new EjectCardEvent(""));    	//listener.ListenEjectCard();    }        /** Retain the card that is currently inside the reader for action by the     *  bank.     */    public void retainCard()    {    	eventBus.post(new RetainCardEvent(""));    	//listener.ListenRetainCard();    }  }
/* * ATM Example system - file CustomerConsole.java    * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.physical;import com.google.common.eventbus.EventBus;import edu.gordon.atm.Session;import edu.gordon.atm.transaction.Deposit;import edu.gordon.atm.transaction.Inquiry;import edu.gordon.atm.transaction.Transaction;import edu.gordon.atm.transaction.Transfer;import edu.gordon.atm.transaction.Withdrawal;import edu.gordon.banking.Money;import edu.gordon.pubsub.upper.DisplayComponent;import edu.gordon.pubsub.upper.DisplayEvent;import edu.gordon.pubsub.upper.ReadAmountComponent;import edu.gordon.pubsub.upper.ReadAmountEvent;import edu.gordon.pubsub.upper.ReadMenuChoiceComponent;import edu.gordon.pubsub.upper.ReadMenuChoiceEvent;import edu.gordon.pubsub.upper.ReadPINComponent;import edu.gordon.pubsub.upper.ReadPINEvent;/** Manager for the ATM's customer console.  In a real ATM, this would  *  manage a physical device; in this edu.gordon.simulation,  it uses classes  *  in package edu.gordon.simulation to simulate the device (actually two separate *  devices - the display and the keyboard.) */ public class CustomerConsole{	private EventBus eventBus;	private static Session session;	private static String type;	/** Constructor     */    public CustomerConsole()    {    	eventBus = new EventBus();    	eventBus.register(new DisplayComponent());    	eventBus.register(new ReadPINComponent());    	eventBus.register(new ReadMenuChoiceComponent());    	eventBus.register(new ReadAmountComponent());    }        /** Display a message to the customer     *     *  @param message the message to display     */    public void display(String message)    {    	//listener.ListenDisplay(message);    	eventBus.post(new DisplayEvent(message));    }        /** Read a PIN entered by the customer (echoed as asterisks)     *     *  @param prompt the message to display prompting the customer to enter PIN     *  @return the PIN that was entered     *  @exception Cancelled if customer presses the CANCEL key before pressing ENTER     */    public void readPIN(Session session, String prompt)    {    	if (session != null)    	{    		CustomerConsole.session=session;	    	}    	    	eventBus.post(new ReadPINEvent("", prompt, 0));    	/*String input = listener.readPIN(prompt, 0);                if (input == null)            throw new Cancelled();        else            return Integer.parseInt(input);*/    }        public static void receiveReadPIN(String input)    {    	Transaction.pin = Integer.parseInt(input);    	session.setPIN(Integer.parseInt(input));    }        /** Display a menu of options and return choice made by customer     *     *  @param prompt message to display before the list of options     *  @param menu the options     *  @return the number of the option chosen (0 .. # of options - 1)     *  Note: the options are numbered 1 .. # of options when displayed for the     *  customer - but the menu array indices and the final result returned are in     *  the range 0 .. # of options - 1     *     *  @exception Cancelled if customer presses the CANCEL key before choosing option     */    public synchronized void readMenuChoice(String type, String prompt, String[] menu) throws Cancelled    {    	CustomerConsole.type=type;    	eventBus.post(new ReadMenuChoiceEvent("", prompt, menu, menu.length));        /*String input = listener.readMenuChoice(prompt, menu, menu.length);                if (input == null)            throw new Cancelled();        else            return Integer.parseInt(input) - 1;*/    }        public static void receiveReadMenuChoice(String input)    {    	if (type.equals("menuChoice"))    	{    		Transaction.menuChoice = Integer.parseInt(input) - 1;    	}    	else if (type.equals("withdrawal_from"))    	{    		Withdrawal.from = Integer.parseInt(input) - 1;    	}    	else if (type.equals("transfer_from"))    	{    		Transfer.from = Integer.parseInt(input) - 1;    	}       	else if (type.equals("transfer_to"))    	{    		Transfer.to = Integer.parseInt(input) - 1;    	}       	else if (type.equals("deposit_to"))       	{       		Deposit.to = Integer.parseInt(input) - 1;       	}       	else if (type.equals("inquiry_from"))       	{       		Inquiry.from = Integer.parseInt(input) - 1;       	}       		       		    	    	    }        /** Read a money amount entered by the customer     *     *  @param prompt the message to display prompting the customer to enter amount     *  @return the amount entered by the customer     *  @exception Cancelled if customer presses the CANCEL key before pressing ENTER     */    public synchronized void readAmount(Transaction transaction, String prompt) throws Cancelled    {    	eventBus.post(new ReadAmountEvent("", prompt, 0));    	/*String input = listener.readAmount("", prompt, 0);                if (input == null)            throw new Cancelled();        else        {            int dollars = Integer.parseInt(input) / 100;            int cents = Integer.parseInt(input) % 100;            return new Money(dollars, cents);        }*/    }        public static void receiveReadAmount(String input)    {        int dollars = Integer.parseInt(input) / 100;        int cents = Integer.parseInt(input) % 100;        Deposit.amount = new Money(dollars, cents);        Transfer.amount = new Money(dollars, cents);    }        /** Exception thrown when the user presses the cancel key while the ATM is     *  waiting for some action     */    public static class Cancelled extends Exception    {		private static final long serialVersionUID = 1L;		/** Constructor         */        public Cancelled()        {            super("Cancelled by customer");        }    }}